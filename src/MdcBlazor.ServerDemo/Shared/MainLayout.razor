@inherits LayoutComponentBase

<MdcSnackbarService />

@if (drawerLayout == 0)
{
    <MdcTopAppBarContainer>
        <MdcTopAppBar OnNavToggle="ToggleDrawer" BarType="MdcTopAppBarType.Regular">
            <Header>
                <MdcTopAppBarRow>
                    <MdcTopAppBarSectionStart>
                        <MdcTopAppBarNavIcon Icon="menu" Label="Open navigation menu" />
                        <MdcTopAppBarTitle>exentials/MdcBlazor-Server-Demo</MdcTopAppBarTitle>
                    </MdcTopAppBarSectionStart>
                    <MdcTopAppBarSectionEnd>
                        <MdcTopAppBarActionButton Label="Favorite" Icon="favorite" />
                        <MdcTopAppBarActionButton Label="Search" Icon="search" />
                        <MdcTopAppBarActionButton Label="Options" Icon="more_vert" />
                    </MdcTopAppBarSectionEnd>
                </MdcTopAppBarRow>
            </Header>
        </MdcTopAppBar>
        <MdcDrawer DrawerType="drawerType" @bind-Open="drawerOpened">
            <MdcDrawerHeader>
                <MdcDrawerTitle>Components</MdcDrawerTitle>
                <MdcDrawerSubtitle>by MdcBlazor</MdcDrawerSubtitle>
            </MdcDrawerHeader>
            <MdcDrawerContent>
                <MdcDrawerNav>
                    <NavMenuItems />
                </MdcDrawerNav>
            </MdcDrawerContent>
        </MdcDrawer>
        <MdcDrawerAppContent>
            <div class="demo-page">
                <CascadingValue Value="this">
                    @Body
                </CascadingValue>
            </div>
        </MdcDrawerAppContent>
    </MdcTopAppBarContainer>
}
else if (drawerLayout == 1 || drawerLayout == 2)
{
<MdcDrawer DrawerType="drawerType" @bind-Open="drawerOpened">
    <MdcDrawerHeader>
        <MdcDrawerTitle>Components</MdcDrawerTitle>
        <MdcDrawerSubtitle>by exentials/MdcBlazor</MdcDrawerSubtitle>
    </MdcDrawerHeader>
    <MdcDrawerContent>
        <MdcDrawerNav OnAction="CloseDrawer">
            <NavMenuItems />
        </MdcDrawerNav>
    </MdcDrawerContent>
</MdcDrawer>
<MdcDrawerAppContent>
    <MdcTopAppBar OnNavToggle="ToggleDrawer" BarType="MdcTopAppBarType.Regular">
        <Header>
            <MdcTopAppBarRow>
                <MdcTopAppBarSectionStart>
                    <MdcTopAppBarNavIcon Icon="menu" Label="Open navigation menu" />
                    <MdcTopAppBarTitle>exentials/MdcBlazor-Server-Demo</MdcTopAppBarTitle>
                </MdcTopAppBarSectionStart>
                <MdcTopAppBarSectionEnd>
                    <MdcTopAppBarActionButton Label="Favorite" Icon="favorite" />
                    <MdcTopAppBarActionButton Label="Search" Icon="search" />
                    <MdcTopAppBarActionButton Label="Options" Icon="more_vert" />
                </MdcTopAppBarSectionEnd>
            </MdcTopAppBarRow>
        </Header>
        <ChildContent>
            <div class="demo-page">
                <CascadingValue Value="this">
                    @Body
                </CascadingValue>
            </div>

        </ChildContent>
    </MdcTopAppBar>
</MdcDrawerAppContent>
}

@code  {
    internal int drawerLayout = 0;
    internal MdcDrawerType drawerType = MdcDrawerType.Dismissible;

    bool drawerOpened = true;

    internal void Change(int value)
    {
        var drawerType = (value == 2) ? MdcDrawerType.Modal : MdcDrawerType.Dismissible;
        drawerOpened = false;
        if (this.drawerType != drawerType)
        {
            this.drawerType = drawerType;
            StateHasChanged();
        }
        if (drawerLayout != value)
        {
            drawerLayout = value;
            StateHasChanged();
        }
    }

    void ToggleDrawer()
    {
        drawerOpened = !drawerOpened;
        StateHasChanged();
    }

    void CloseDrawer()
    {
        drawerOpened = false;
        StateHasChanged();
    }
}

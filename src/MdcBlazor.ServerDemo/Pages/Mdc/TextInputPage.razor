@page "/textinputs"
<MdcHeadline4>Text inputs</MdcHeadline4>
<p>
    <label>
        Prefix
        <input type="text" @onchange="args => {prefix = Convert.ToString(args.Value); Refresh(); }" />
    </label>
    <label>
        Suffix
        <input type="text" @onchange="args => {suffix = Convert.ToString(args.Value); Refresh(); }" />
    </label>
    <label>
        <input type="checkbox" @onchange="args => {alignEnd = Convert.ToBoolean(args.Value); Refresh(); }" />
        Align End
    </label>
</p>
<p>
    <label>
        <input type="checkbox" @onchange='args => {leadingIcon = (Convert.ToBoolean(args.Value)? "favorite":""); Refresh(); }' />
        Leading icon
    </label>
    <label>
        <input type="checkbox" @onchange='args => {trailingIcon = (Convert.ToBoolean(args.Value)? "favorite":""); Refresh(); }' />
        Trailing icon
    </label>

    <label>
        Max length
        <input type="number" value="@maxlength" @onchange="args => {maxlength = Convert.ToInt32(args.Value); Refresh(); }" />
    </label>
    <label>
        <input type="checkbox" @onchange="args => {showCounter = Convert.ToBoolean(args.Value); Refresh(); }" />
        Show counter
    </label>
</p>
<DemoComponent @ref="demoComponent">
    <TopBar>
        <MdcTabBar @bind-ActiveTab="tab">
            <MdcTab Label="TextField" />
            <MdcTab Label="Textarea" />
        </MdcTabBar>
    </TopBar>
    <Content>
        <DemoComponentContainer @ref="demo1">
        @if (tab == 0)
            {        
            <MdcTextField Label="My label" @bind-Value="text"
                Outlined="@outlined"
                Disabled="@disabled"
                NoLabel="@nolabel"
                Prefix="@prefix"
                Suffix="@suffix"
                AlignEnd="alignEnd"
                Maxlength="@maxlength"
                ShowCounter="@showCounter"
                HelperType="@helperType"
                HelperMessage="@helperMessage"
                Required="@required"
                LeadingIcon="@leadingIcon"
                TrailingIcon="@trailingIcon" />
        }
        else
        {
            <MdcTextarea Label="My label" @bind-Value="textarea"
                Outlined="@outlined"
                Disabled="@disabled"
                Resizable="@resizable"
                NoLabel="@nolabel"
                Maxlength="@maxlength"
                ShowCounter="@showCounter"
                HelperType="@helperType"
                HelperMessage="@helperMessage"
                Required="@required" />
        }
        </DemoComponentContainer>
    </Content>

    <TopOption>
        Options
    </TopOption>
    <Options>
        <MdcCheckbox Label="Outlined" Value="outlined" ValueChanged="(arg) => { outlined = arg??false; Refresh(); }" />
        <MdcCheckbox Label="Disabled" Value="disabled" ValueChanged="(arg) => { disabled = arg??false; Refresh(); }" />
        <MdcCheckbox Label="Resizable" Value="resizable" ValueChanged="(arg) => { resizable = arg??false; Refresh(); }" />
        <MdcCheckbox Label="No label" Value="nolabel" ValueChanged="(arg) => { nolabel = arg??false; Refresh(); }" />
        <MdcCheckbox Label="Required" Value="required" ValueChanged="(arg) => { required = arg??false; Refresh(); }" />
        <label>
            Help message
            <input type="text" value="@helperMessage" @onchange="args => {helperMessage = Convert.ToString(args.Value); Refresh(); }" />
        </label>
        <select @onchange="args => { helperType = ParseHelper(args.Value); Refresh(); }">
            @foreach (var opt in Enum.GetNames<MdcTextFieldHelperType>())
            {
            <option value="@opt">@opt</option>
            }
        </select>
    </Options>
</DemoComponent>

@code
{
    DemoComponent demoComponent;
    int tab = 0;
    DemoComponentContainer demo1;

    string text;
    string textarea;
    string prefix;
    string suffix;

    bool outlined;
    bool disabled;
    bool resizable;
    bool nolabel;
    bool alignEnd;
    bool showCounter;
    int maxlength = 50;
    MdcTextFieldHelperType helperType;
    string helperMessage = "Write some text";
    bool required;
    string leadingIcon;
    string trailingIcon;

    MdcTextFieldHelperType ParseHelper(object value)
    {
        return Enum.Parse<MdcTextFieldHelperType>(value.ToString());
    }

    void Refresh()
    {        
        demo1.Refresh();
        
    }

}
@page "/textinputs"
<p>
    <label>
        <input type="checkbox" @onchange="args => {outlined = Convert.ToBoolean(args.Value); Refresh(); }" />
        Outlined
    </label>
    <label>
        <input type="checkbox" @onchange="args => {disabled = Convert.ToBoolean(args.Value); Refresh(); }" />
        Disabled
    </label>
    <label>
        <input type="checkbox" @onchange="args => {resizable = Convert.ToBoolean(args.Value); Refresh(); }" />
        Resizable
    </label>
    <label>
        <input type="checkbox" @onchange="args => {nolabel = Convert.ToBoolean(args.Value); Refresh(); }" />
        No label
    </label>
    <label>
        <input type="checkbox" @onchange="args => {required = Convert.ToBoolean(args.Value); Refresh(); }" />
        Required
    </label>
</p>
<p>
    <label>
        Prefix
        <input type="text" @onchange="args => {prefix = Convert.ToString(args.Value); Refresh(); }" />
    </label>
    <label>
        Suffix
        <input type="text" @onchange="args => {suffix = Convert.ToString(args.Value); Refresh(); }" />
    </label>
    <label>
        <input type="checkbox" @onchange="args => {alignEnd = Convert.ToBoolean(args.Value); Refresh(); }" />
        Align End
    </label>
</p>
<p>
    <label>
        <input type="checkbox" @onchange='args => {leadingIcon = (Convert.ToBoolean(args.Value)? "favorite":""); Refresh(); }' />
        Leading icon
    </label>
    <label>
        <input type="checkbox" @onchange='args => {trailingIcon = (Convert.ToBoolean(args.Value)? "favorite":""); Refresh(); }' />
        Trailing icon
    </label>

    <label>
        Max length
        <input type="number" value="@maxlength" @onchange="args => {maxlength = Convert.ToInt32(args.Value); Refresh(); }" />
    </label>
    <label>
        <input type="checkbox" @onchange="args => {showCounter = Convert.ToBoolean(args.Value); Refresh(); }" />
        Show counter
    </label>
</p>
<p>
    <label>
        Help message
        <input type="text" value="@helperMessage" @onchange="args => {helperMessage = Convert.ToString(args.Value); Refresh(); }" />
    </label>
    <select @onchange="args => { helperType = ParseHelper(args.Value); Refresh(); }">
        @foreach (var opt in Enum.GetNames<MdcTextFieldHelperType>())
        {
        <option value="@opt">@opt</option>
        }
    </select>
</p>


<MdcHeadline4>Text field</MdcHeadline4>
<DemoComponent>
    <DemoComponentContainer @ref="demo1">
        <MdcTextField Label="My label" @bind-Value="text" 
            Outlined="@outlined" 
            Disabled="@disabled" 
            NoLabel="@nolabel" 
            Prefix="@prefix" 
            Suffix="@suffix" 
            AlignEnd="alignEnd" 
            Maxlength="@maxlength" 
            ShowCounter="@showCounter"
            HelperType="@helperType"
            HelperMessage="@helperMessage"
            Required="@required"
            LeadingIcon="@leadingIcon"
            TrailingIcon="@trailingIcon"
        />
    </DemoComponentContainer>
</DemoComponent>
<MdcHeadline4>Text area</MdcHeadline4>
<DemoComponent>
    <DemoComponentContainer @ref="demo2">
        <MdcTextarea Label="My label" @bind-Value="textarea" 
            Outlined="@outlined" 
            Disabled="@disabled" 
            Resizable="@resizable" 
            NoLabel="@nolabel" 
            Maxlength="@maxlength" 
            ShowCounter="@showCounter"
            HelperType="@helperType"
            HelperMessage="@helperMessage" 
            Required="@required"
        />
    </DemoComponentContainer>
</DemoComponent>

@code
{
    DemoComponentContainer demo1;
    DemoComponentContainer demo2;

    string text;
    string textarea;
    string prefix;
    string suffix;

    bool outlined;
    bool disabled;
    bool resizable;
    bool nolabel;
    bool alignEnd;
    bool showCounter;
    int maxlength = 50;
    MdcTextFieldHelperType helperType;
    string helperMessage = "Write some text";
    bool required;
    string leadingIcon;
    string trailingIcon;

    MdcTextFieldHelperType ParseHelper(object value)
    {
        return Enum.Parse<MdcTextFieldHelperType>(value.ToString());
    }

    void Refresh()
    {
        demo1.Refresh();
        demo2.Refresh();
    }

}